@page "/BookingPage/{id}"
@using System.Text.RegularExpressions;
@using sentinel.APP.ViewModel;
@using sentinelapi.Entities;
@using System.Net.Http.Json
  @using System.Text;
 @using Newtonsoft.Json.Serialization;
 @using Newtonsoft.Json;
@using System.ComponentModel.DataAnnotations;

@inject MudBlazor.ISnackbar snackBar
@inject HttpClient httpClient
@inject NavigationManager NavManager

<h3>BookingPage</h3>


<p>Locker Id : @id</p>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                        <MudTextField Label="CustomerId"
                                  @bind-Value="model.CustomerId"  For="@(() => model.CustomerId)" />

                    
                
                    <MudTextField Label="First name" 
                                  @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                    <MudTextField Label="Last name"  
                                  @bind-Value="model.LastName" For="@(() => model.LastName)" />

                    <MudTextField Label="Notes"  Lines="3"
                                  @bind-Value="model.Notes"   For="@(() => model.Notes)" />

                    <MudCheckBox Label="Rented"  @bind-Value="model.IsRented" Checked=true For="@(() => model.IsRented)" />
                    
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />

                    <MudTextField Label="Phone" Class="mt-3"
                                  @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" />


                    <MudTextField Label="Pin Code" Class="mt-3"
                                  @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" />

                       </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Make Booking</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>>

           

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    BookingViewModelForm model = new BookingViewModelForm();
    [Parameter] public string id { get; set; }
    protected override void OnParametersSet()
    {

    }


    protected override async Task OnInitializedAsync()
    {
        var lockerId = id;
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = true;

        string url = Constants.BaseUrl + Constants.Lockers;
        string statusCode;

        List<string> errors = new List<string>();
        var serializerSettings = new JsonSerializerSettings { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore };
        model.LockerId = id;
        model.IsRented = true;
        String json = JsonConvert.SerializeObject(model, Formatting.Indented, serializerSettings);
        StringContent httpConent;

        using (httpConent = new StringContent(json, Encoding.UTF8, "application/json"))
        {

            //   AddAuthenicationHeader();
            // Do the actual request and await the response
            using (var response = await httpClient.PutAsync(Constants.BaseUrl + Constants.Lockers, httpConent))
            {

                snackBar.Add("Booking has been created against customer");

            }
        }

        await Task.Delay(300);
        NavManager.NavigateTo("/LockersPage/");

        StateHasChanged();
    }
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}
