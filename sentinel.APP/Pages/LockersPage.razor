@page "/lockerspage"
@using System.Net.Http.Json
 @using  sentinelapi.Domain;
 @using System.Text;
 @using Newtonsoft.Json.Serialization;
 @using Newtonsoft.Json;
@using sentinelapi.Domain.Entities;
@inject NavigationManager NavManager

@inject HttpClient httpClient
<table cellpadding="10" cellspacing="10">
    <thead>
        <tr>
            @foreach (var item in headings)
            {
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
            <th>@item </th>
            }
        </tr>
    </thead>
    <tbody>
        <tr>
            @foreach(var item in Elements)
            {
                @if(item.IsRented==true)
                {
                    <td style="width:300px;height:100px;background-color:red;color:white;">
                        @item.Name
                        Occupied
                    
                    </td>
                     
                }else
                {
                    <p>&nbsp;</p>
                    <p>&nbsp;</p>
                    <p>&nbsp;</p>
                    <td style="width:200px;height:100px;background-color:green;color:white;text-align:center;  border-spacing: 10px;"> @item.Name
                        <p>&nbsp;</p>
                         <p>&nbsp;</p>
                        <p>&nbsp;</p>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" @onclick="@(() => NavigateToBBookingPage(item.LockerId.ToString()))" Color=" Color.Error">Book</MudButton>

                       


                    </td>
                }
            }
        </tr>
    </tbody>
</table>

@*

<MudDataGrid T=Locker Items="@Elements" ReadOnly="@_readOnly"   Filterable=true >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    
    <Columns>
        <Column T="Locker" Field="LockerId" />
        <Column T="Locker" Field="Name" Title="Row"   />
        <Column T="Locker" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" OnClick="@context.Actions.StartEditingItem" Color="Color.Error">Book Locker</MudButton>


            </CellTemplate>
        </Column>
        </Columns>

</MudDataGrid>*@
 

@code {
    public List<Locker> Elements { get; set; }
    private bool _readOnly;
    string[] headings = { "A", "B", "C", "D", "E", "F" ,"G","H"};

    private string _searchString;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;
    private List<string> _events = new();

    private Func<Locker, string> _cellStyleFunc => x =>
      {
          string style = "";

          if (x.IsRented == false)
              style += "background-color:#00FF00";
          else
              style += "background-color:#FF0000";
          return style;

      };
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Elements = new List<Locker>();
            string url = Constants.BaseUrl + Constants.Lockers;
            var response = await httpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var byteArray = await response.Content.ReadAsByteArrayAsync();

                var content = Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
                Elements = JsonConvert.DeserializeObject<List<Locker>>(content);
                Elements = Elements.Where(w => w.GroupId == 2).ToList(); 
            }
        }
        catch(Exception ex)
        {
            
        }


    }
    private void NavigateToBBookingPage(string? id) { 
        NavManager.NavigateTo($"/BookingPage/{id}");
        
}
    
    
     
}
